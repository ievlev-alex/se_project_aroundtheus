!function(){"use strict";var e=class{constructor(e,t,s,r,i){this._name=e.name,this._link=e.link,this._cardSelector=t,this._handleImageClick=s,this._confirmDeletePopup=r,this._api=i,this._cardId=e._id,this._likes=e.isLiked||!1}_getTemplate(){return document.querySelector(this._cardSelector).content.firstElementChild.cloneNode(!0)}_handleLikeClick(){(this._likes?this._api.dislikeCard:this._api.likeCard).call(this._api,this._cardId).then((e=>{this._likes=e.isLiked,this._likeButton.classList.toggle("card__like-button_active")})).catch((e=>console.error(e)))}_setEventListeners(){this._likeButton=this._element.querySelector(".card__like-button"),this._deleteButton=this._element.querySelector(".card__delete-button"),this._cardImage=this._element.querySelector(".card__image"),this._likeButton.addEventListener("click",(()=>{this._handleLikeClick()})),this._deleteButton.addEventListener("click",(()=>{this._confirmDeletePopup.setData(this),this._confirmDeletePopup.open()})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick(this._name,this._link)}))}createCard(){this._element=this._getTemplate(),this._setEventListeners();const e=this._element.querySelector(".card__title");return this._cardImage.src=this._link,this._cardImage.alt=this._name,e.textContent=this._name,!0===this._likes&&this._likeButton.classList.add("card__like-button_active"),this._element}remove(){this._element.remove(),this._element=null}},t=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._inputElements=Array.from(this._form.querySelectorAll(this._inputSelector)),this._buttonElement=this._form.querySelector(this._submitButtonSelector)}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t?(t.classList.remove(this._errorClass),t.textContent=""):console.warn(`Не найден элемент ошибки для input #${e.id}`)}_hasInvalidInput(){return this._inputElements.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_setEventListeners(){this._toggleButtonState(),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}disableButton(){this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.disabled=!0}resetValidation(){this._inputElements.forEach((e=>{this._hideInputError(e)})),this._toggleButtonState()}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}},s=class{constructor(e){this._popup=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popup.addEventListener("click",(e=>{(e.target.classList.contains("modal")||e.target.classList.contains("modal__close"))&&this.close()}))}},r=class extends s{constructor(e,t){super(e),this._handleSubmit=t,this._form=this._popup.querySelector("form"),this._inputList=this._form.querySelectorAll("input")}_getInputValues(){return this._formValues={},this._inputList.forEach((e=>{this._formValues[e.name]=e.value})),this._formValues}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}renderLoading(e){const t=this._popup.querySelector(".modal__button");t&&(t.textContent=e?"Saving...":"Save")}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(this._getInputValues()),this._form.reset()}))}};const i=document.querySelector(".profile__edit-button"),n=document.querySelector(".profile__add-button"),a=document.querySelector(".profile__photo-container"),o=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_handleResponse(e){return e.ok?e.json():e.text().then((t=>{throw new Error(`Error: ${e.status} - ${t}`)}))}_handleError(e){return console.error("API Error:",e),Promise.reject(e)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._handleResponse).catch(this._handleError)}updateUserInfo(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._handleResponse).catch(this._handleError)}updateAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify(e)}).then(this._handleResponse).catch(this._handleError)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._handleResponse).catch(this._handleError)}createCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify(e)}).then(this._handleResponse).catch(this._handleError)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._handleResponse).catch(this._handleError)}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._handleResponse).catch(this._handleError)}dislikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._handleResponse).catch(this._handleError)}getAppData(){return Promise.all([this.getUserInfo(),this.getInitialCards()]).catch((e=>(this._handleError(e),Promise.reject(e))))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"660f60ae-1ffb-44a2-ae40-5e62b3aee5a2","Content-Type":"application/json"}});function l(t){return new e(t,"#card-template",((e,t)=>h.open({name:e,link:t})),m,o).createCard()}const h=new class extends s{constructor(e){super(e),this._imageModalPicture=this._popup.querySelector(".modal__image"),this._imageModalTitle=this._popup.querySelector("#image-modal-title")}open(e){this._imageModalPicture.src=e.link,this._imageModalPicture.alt=e.name,this._imageModalTitle.textContent=e.name,super.open()}}("#image-modal"),d=new class{constructor(e){let{nameSelector:t,aboutSelector:s,avatarSelector:r}=e;this._nameElement=document.querySelector(t),this._aboutElement=document.querySelector(s),this._avatarElement=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,about:this._aboutElement.textContent,avatar:this._avatarElement.src}}setUserAvatar(e){this._avatarElement.src=e}setUserInfo(e){let{name:t,about:s,avatar:r}=e;this._nameElement.textContent=t,this._aboutElement.textContent=s,r&&this.setUserAvatar(r)}}({nameSelector:".profile__title",aboutSelector:".profile__description",avatarSelector:".profile__photo"}),c=new r("#profile-modal",(e=>{c.renderLoading(!0),o.updateUserInfo({name:e.name,about:e.about}).then((e=>{d.setUserInfo(e),c.close()})).catch((e=>{console.error(`Error edit profile: ${e}`)})).finally((()=>{c.renderLoading(!1)}))})),_=new r("#add-modal",(e=>{_.renderLoading(!0),o.createCard({name:e["image-title"],link:e.link}).then((e=>{const t=l(e);p.addItem(t),_.close()})).catch((e=>{console.error(`Error adding card: ${e}`)})).finally((()=>{_.renderLoading(!1)}))})),u=new class extends r{constructor(e,t){super(e,t)}}("#change-modal",(e=>{u.renderLoading(!0),o.updateAvatar({avatar:e.avatar}).then((e=>{d.setUserAvatar(e.avatar),u.close()})).catch((e=>{console.error(`Error changing avatar: ${e}`)})).finally((()=>{u.renderLoading(!1)}))})),m=new class extends s{constructor(e,t){super(e),this._handleSubmit=t,this._form=this._popup.querySelector("form")}setData(e){this._card=e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(this._card),this.close()}))}}("#delete-modal",(function(e){o.deleteCard(e._cardId).then((()=>{e.remove()})).catch((e=>console.error(e)))})),p=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._items,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"append";e.forEach((e=>{this.addItem(this._renderer(e),t)}))}addItem(e){this._container.prepend(e)}}({items:[],renderer:e=>l(e)},".elements__list");o.getAppData().then((e=>{let[t,s]=e;t?d.setUserInfo(t):console.error("User data not available.");const r=s.find((e=>"Greetings from the server!"===e.name));r?o.deleteCard(r._id).then((()=>{const e=s.filter((e=>e._id!==r._id));p.renderItems(e)})).catch((e=>console.log("Error deleting card:",e))):p.renderItems(s)})).catch((e=>console.error("Failed to load initial data:",e))),i.addEventListener("click",(()=>{c.setInputValues(d.getUserInfo()),E.editForm.resetValidation(),c.open()})),n.addEventListener("click",(()=>{E.cardForm.resetValidation(),_.open()})),a.addEventListener("click",(()=>{u.open()})),_.setEventListeners(),m.setEventListeners(),h.setEventListeners(),c.setEventListeners(),u.setEventListeners();const E={};var v;v={formSelector:".modal__form",inputSelector:".modal__form-textfield",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_inactive",inputErrorClass:"modal__form-textfield-error",errorClass:"modal__error-text-visible"},Array.from(document.querySelectorAll(v.formSelector)).forEach((e=>{const s=new t(v,e),r=e.getAttribute("name");r&&(E[r]=s,s.enableValidation())}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,